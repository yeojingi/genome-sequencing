# from ..LinearScoring import linear_scoring
# from ...lecture5.Trim.LinearScoring import linear_scoring

from copy import copy


def trim(leaderboard, spectrum, N):
  linearScore = []
  trimmed = []

  for i in range(len(leaderboard)):
    peptide = leaderboard[i]
    linearScore.append([linear_scoring(peptide, spectrum), peptide])
  
  # 오름차순
  linearScore.sort(key=lambda x: x[0])

  if len(linearScore) < N:
    criteriaScore = linearScore[0][0]
  else:
    criteriaScore = linearScore[-N][0]

  while linearScore and linearScore[-1][0] >= criteriaScore:
    trimmedSignle = linearScore.pop()
    trimmed.append(trimmedSignle[1])
  
  return trimmed

AminoAcidMass = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99, 'T': 101, 'C': 103, 'I': 113,
    'L': 113, 'N': 114, 'D': 115, 'K': 128, 'Q': 128, 'E': 129, 'M': 131,
    'H': 137, 'F': 147, 'R': 156, 'Y': 163, 'W': 186}

def linear_scoring(peptide, spectrum):
  L = len(peptide)
  spectrum = copy(spectrum)
  S = len(spectrum)

  def mass(window):
    ans = 0
    
    for aa in window:
      ans += AminoAcidMass[aa]
    
    return ans

  for k in range(L+1):
    for i in range(L - k + 1):
      window = peptide[i:i+k]
      m = mass(window)

      try:
        spectrum.remove(m)
      except ValueError as e:
        pass
      
  
  ans = S - len(spectrum)
  
  return ans

print(" ".join(trim("YKKELQRLCSNDINWAHINTDTHDQCSPEKFETGSGGPKPTHQE QTHSTYTEGPCLHGVQAGSRAMAWTVGHQDVIFPSACPSQCTSV VAVLWAWWLDAPINYPWKSIQQSAKWTKNDWYHDRKNPWIIALQ REMRLTRQKGDSPVDWARHAVNVNGNQHARQFWWDDAKIYEWEE GSCFMPEMHYSFMLKKRSCFQIFSEAVELIAMSEHQKSVNMFLF SFNEWFGEWKDKMTELQKCLMGGHQWTGLCCFLIKMMVKWKCRN YWDLFNKESTPDGLVQDLYLAHNFDSSEQDTKVGPRDANGTTVT FQEARWDKCQNVMAPIWCSGLAMIISHVDGRNSDWDPDMMFPVV SYRDPGGDDMQCSLASSSIAWCFWGCKMVKWCCKHAGVKTILGI TPYYPCMQPEDIFQLFKLNSYKQSMNVESRIIACQWPCYNNEYI WNSLGPNSSQECPQHWFYNTCAKRKAPIEYTCDRQIQWDFYKCF DDYKDIVKQCVESCTGFPDAGGNLYQTGYWRWEKEDSKHRIQVD KRDHSSQESMRKQIYTDFCCCDPSFTKTDDYKFRIIPTDCATTI PVVCKHWKTFLPAKPPTHDDQQKAMYETPMCVIELERITLFSYV YSVTHQQLPVVAPKMADFVGFFYARHFHSLYHGSEANDICITEQ VHYPWGSTMVQLIITKIKAKIMHPTYVFWECVRGDNLRWNVDYK MGFNDCRDNHDMMIMIRRLNYPVIMFHWYSQPQYSEKEIDWPGA".split(),
list(map(int, "0 57 57 57 71 97 97 99 99 101 101 103 103 103 113 113 113 113 113 113 113 114 115 115 128 128 128 128 129 129 137 147 147 147 147 147 147 156 156 156 163 163 163 163 163 163 170 185 186 202 204 204 210 212 214 218 220 225 227 227 228 230 234 242 242 242 243 250 252 259 260 260 260 260 264 276 276 276 277 284 291 291 294 299 299 303 303 303 310 310 317 317 317 319 324 330 333 333 339 340 341 342 343 348 348 351 355 355 356 362 373 374 374 375 377 377 388 389 406 406 411 412 416 419 423 423 430 430 432 437 439 440 445 445 446 446 446 446 447 447 450 450 454 455 457 469 476 480 487 487 489 490 502 503 507 511 511 511 518 521 524 536 540 543 544 544 545 552 553 558 558 558 559 559 559 560 566 575 582 586 592 593 593 597 600 602 602 603 608 609 610 613 616 632 636 639 639 643 653 653 654 658 658 659 660 671 672 672 673 674 679 681 687 687 690 699 699 700 705 705 706 707 707 714 717 721 722 729 736 736 738 749 749 756 756 760 762 763 771 771 772 778 783 786 787 788 795 795 800 800 801 802 812 816 820 820 827 834 835 835 842 844 846 849 850 852 853 861 863 869 875 883 884 885 885 886 891 892 892 896 899 899 901 906 910 912 913 915 930 934 947 951 957 958 963 963 963 964 964 967 967 974 978 990 993 996 998 998 1004 1005 1005 1009 1013 1014 1014 1014 1015 1020 1025 1032 1038 1043 1046 1047 1054 1055 1055 1055 1062 1065 1066 1076 1077 1079 1093 1099 1103 1104 1110 1110 1111 1113 1117 1118 1119 1123 1126 1128 1130 1134 1137 1140 1142 1145 1152 1156 1159 1168 1175 1176 1178 1182 1183 1183 1188 1194 1194 1201 1202 1206 1213 1216 1223 1232 1235 1239 1240 1241 1243 1246 1247 1250 1257 1262 1265 1266 1267 1270 1274 1280 1282 1289 1291 1297 1301 1303 1303 1304 1307 1307 1315 1329 1330 1338 1338 1341 1341 1344 1346 1353 1357 1360 1360 1361 1370 1379 1380 1393 1394 1395 1398 1402 1402 1404 1404 1406 1409 1409 1413 1413 1417 1417 1417 1420 1430 1441 1443 1454 1466 1470 1474 1474 1485 1485 1488 1492 1492 1493 1495 1501 1501 1504 1505 1516 1517 1519 1522 1523 1524 1526 1531 1543 1556 1556 1558 1558 1560 1564 1565 1567 1580 1583 1583 1598 1604 1605 1606 1617 1620 1621 1621 1621 1623 1624 1632 1637 1641 1648 1651 1651 1656 1657 1663 1668 1673 1677 1678 1680 1680 1681 1686 1694 1696 1703 1712 1712 1721 1722 1726 1734 1734 1734 1734 1737 1745 1746 1752 1757 1760 1764 1776 1779 1783 1785 1788 1791 1791 1792 1793 1794 1804 1814 1815 1825 1835 1841 1843 1847 1849 1849 1859 1859 1859 1859 1863 1865 1873 1877 1888 1893 1900 1901 1904 1906 1915 1920 1920 1930 1935 1938 1938 1942 1948 1951 1954 1956 1956 1957 1962 1962 1964 1972 1976 1977 2006 2006 2006 2013 2015 2019 2028 2028 2029 2033 2034 2043 2048 2051 2051 2051 2063 2067 2067 2069 2070 2076 2077 2077 2085 2098 2098 2103 2109 2118 2119 2119 2122 2128 2133 2134 2141 2156 2162 2164 2166 2176 2176 2179 2180 2180 2191 2192 2195 2197 2199 2210 2214 2214 2216 2233 2233 2236 2237 2241 2261 2265 2265 2266 2275 2279 2281 2293 2294 2296 2304 2304 2305 2312 2319 2323 2323 2327 2339 2358 2362 2366 2368 2370 2370 2379 2380 2380 2384 2384 2388 2393 2394 2399 2402 2407 2408 2422 2432 2436 2451 2452 2459 2467 2469 2475 2475 2483 2483 2486 2493 2495 2496 2497 2506 2509 2517 2517 2531 2535 2536 2540 2549 2564 2565 2572 2584 2585 2587 2588 2595 2598 2608 2609 2612 2614 2620 2622 2630 2635 2637 2638 2644 2664 2679 2686 2687 2687 2698 2700 2705 2711 2712 2713 2721 2727 2735 2736 2738 2740 2742 2750 2751 2751 2759 2769 2777 2799 2799 2800 2808 2826 2826 2827 2834 2834 2839 2839 2848 2850 2855 2863 2868 2887 2897 2898 2912 2913 2914 2915 2923 2925 2928 2940 2942 2947 2962 2963 2971 2976 2981 2982 2986 2997 3011 3011 3028 3041 3041 3041 3043 3053 3060 3060 3061 3062 3075 3075 3085 3086 3089 3094 3098 3139 3142 3143 3144 3154 3156 3158 3174 3188 3188 3190 3197 3200 3204 3209 3211 3216 3223 3238 3245 3245 3257 3271 3271 3280 3286 3289 3317 3317 3319 3337 3337 3344 3344 3351 3358 3358 3360 3372 3374 3385 3392 3399 3408 3430 3434 3436 3447 3457 3471 3473 3480 3487 3498 3498 3500 3500 3507 3521 3539 3562 3571 3585 3586 3593 3599 3601 3603 3604 3611 3627 3634 3634 3650 3663 3684 3699 3700 3702 3714 3718 3732 3740 3740 3747 3749 3760 3766 3797 3797 3797 3803 3813 3831 3853 3855 3862 3863 3877 3881 3888 3910 3910 3916 3926 3944 3944 3976 3978 3987 3990 3991 4018 4025 4039 4057 4057 4073 4079 4089 4090 4096 4100 4106 4115 4153 4170 4172 4186 4192 4203 4205 4229 4243 4243 4243 4252 4285 4300 4318 4332 4342 4342 4355 4356 4390 4399 4399 4413 4445 4447 4455 4471 4502 4502 4503 4512 4546 4560 4584 4599 4615 4617 4618 4649 4659 4697 4698 4746 4754 4762 4764 4774 4801 4845 4877 4877 4901 4902 4948 4992 5001 5005 5014 5104 5104 5120 5129 5207 5219 5257 5322 5356 5459".split())),
5)))
